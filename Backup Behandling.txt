#include "Behandling.h"



Behandling::Behandling()
{
}

int Behandling::goertzler(int fs, int f, std::vector<int> sampels)
{
	int n = sampels.size();
	int magnitude = 0;
	int w0 = 0;
	int w1 = 0;
	int w2 = 0;
	float pi = 3.141592;

	float k = floor((0.5 + ((n*f) / fs)));
	float omega = (float)(2 * (pi / n))*k;
	float cosine = (float)cos(omega);
	//float sine = sin(omega);
	float coeff = 2 * cosine;

	for (int i = 0; i < n; i++) {
		w0 = (coeff * w1) - w2 + sampels[i];
		w2 = w1;
		w1 = w0;
	}

	magnitude = sqrt(w1*w1 + w2 * w2 - w1 * w2*coeff);
	return magnitude;
}

int Behandling::bestLowDTMF(int fs, std::vector<int> sampels)
{
	lowMagnitude[0] = 0;
	lowMagnitude[1] = 0;
	lowMagnitude[2] = 0;
	lowMagnitude[3] = 0;
	
	int a = 1;
	int lowDTMF[4] = { 697, 770, 852, 941 };
	
	for (int i = 0; i < 4; i++) {											// Finder den frekvens med højest værdi blandt de lave DTMF toner
		if (goertzler(fs, lowDTMF[i], sampels) > goertzler(fs, a, sampels)) {
			a = lowDTMF[i];
			lowMagnitude[i] = goertzler(fs, lowDTMF[i], sampels);
		}
	}
	getLowMag();
	return a;
}


int Behandling::bestHighDTMF(int fs, std::vector<int> sampels)
{
	highMagnitude[0] = 0;
	highMagnitude[1] = 0;
	highMagnitude[2] = 0;
	highMagnitude[3] = 0;
	
	int a = 1;
	int highDTMF[4] = { 1209, 1336,1477,1633 };								
	for (int i = 0; i < 4; i++) {											// Finder den frekvens med den højeste værdi blandt de høje DTMF toner
		if (goertzler(fs, highDTMF[i], sampels) > goertzler(fs, a, sampels)) {			// måskke kan denne optimeres så gørtzler ikke bliver kaldt to gange
			a = highDTMF[i];						
			highMagnitude[i] = goertzler(fs, highDTMF[i], sampels);														// EVT. at den husker den forrige værdi
		}
	}
	getHighMag();
	return a;
}

void Behandling::getLowMag()
{
	for (size_t i = 0; i < 4; i++)
	{
		std::cout << lowMagnitude[i] << std::endl;
	}
}

void Behandling::getHighMag()
{
	for (size_t i = 0; i < 4; i++)
	{
		std::cout << highMagnitude[i] << std::endl;
	}
}

Behandling::~Behandling()
{
}
